---
 const {color, cardStyle, colorName, colorNumber, dark} = Astro.props
 import { twMerge } from "tailwind-merge";
---
<div class={twMerge("color-card w-full h-full flex flex-col justify-between items-center text-center text-[8px] lg:text-[16px] py-1 transition-all duration-500 transform hover:-translate-y-3 group", cardStyle, dark && 'text-primary-color')}>
    <p class={twMerge("px-2 py-1 border-[1px] border-secondary-color rounded transition-all duration-500 transform group-hover:-translate-y-3 group-hover:scale-150 group-hover:bg-secondary-color group-hover:text-primary-color", dark && 'border-primary-color')}>{colorNumber}</p>
    <div>
        <p class="lg:text-[24px] md:text-[16px]">{colorName}</p>
        <p class="opacity-60">{color}</p>
    </div>
</div>
<script>
    const allColorCards = document.querySelectorAll('.color-card') as NodeListOf<HTMLElement>
    const colorCardsParent = document.querySelector('.color-card-bg') as HTMLElement
    let originalParentColor = window.getComputedStyle(colorCardsParent).backgroundColor

    allColorCards.forEach(card => {
        let cardColor = window.getComputedStyle(card).backgroundColor

        card.onmouseenter = () => {
            let parentColor = window.getComputedStyle(colorCardsParent).backgroundColor

            colorCardsParent.animate([{backgroundColor : `${parentColor}`}, {backgroundColor : `${cardColor}`}], {duration:500, fill:'forwards'})
        }
    })

    colorCardsParent.onmouseleave = () => {
        let currentCardColor = window.getComputedStyle(colorCardsParent).backgroundColor
        colorCardsParent.animate([{backgroundColor : `${currentCardColor}`}, {backgroundColor : `${originalParentColor}`}], {duration:500, fill:'forwards'})

    }
</script>