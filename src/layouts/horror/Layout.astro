---
export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Advent+Pro:wght@700&display=swap" rel="stylesheet">
		<title>{title}</title>
	</head>
	<slot name="header"/>
	<body class="bg-primary-color pt-16 md:pt-28">
		<div class="pointer-events-none opacity-0 w-3 h-3 bg-horror-neutral-color normal fixed kur left-0 top-0 z-[500]"></div>
		<slot />
	</body>
	<slot name="footer"/>
</html>
<style is:global>
	@media (any-hover:hover){
		.pointed{
			border-radius: 0%;
			clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%);
			opacity: 1;
		}

		.normal{
			border-radius: 100%;
			opacity: 1;
		}
	}

	
	
	@font-face{
		font-family: "bloody";
		src: url('/fonts/BLOODY.TTF') format('truetype');
		font-weight:700;
	}	

	@font-face{
		font-family: "SF";
		src: url('/fonts/SFUIText/SFUIText-BoldG3.otf') format('opentype');
		font-weight: 700;
	}

	@font-face{
		font-family: "SF";
		src: url('/fonts/SFUIText/SFUIText-BoldG3.otf') format('opentype');
		font-weight: 600;
	}

	@font-face{
		font-family: "SF";
		src: url('/fonts/SFUIText/SFUIText-LightItalic.otf') format('opentype');
		font-weight: normal;
		font-style: italic
	}

	@font-face{
		font-family: "SF";
		src: url('/fonts/SFUIText/SFUIText-Light.otf') format('opentype');
		font-weight: normal;
		font-style: normal;
	}

	@font-face{
		font-family: "SF";
		src: url('/fonts/SFUIText/SFUIText-Semibold.otf') format('opentype');
		font-weight: 600;
		font-style: normal;
	}

	@font-face{
		font-family: "SF";
		src: url('/fonts/SFUIText/SFUIText-Medium.otf') format('opentype');
		font-weight: 500;
		font-style: normal;
	}

	@font-face{
		font-family: "Melted";
		src: url('/fonts/MeltedMonster.ttf') format('opentype');
		font-weight: 800;
		font-style: normal;
	}

	*, *::after, *::before{
		-webkit-user-select: none;
		-webkit-user-drag: none;
		-webkit-app-region: none;
		/* touch-action: none; */
	}

	.curses-carousel{
		-webkit-user-select: none;
		-webkit-user-drag: none;
		-webkit-app-region: none;
		touch-action: none;
	}

	#stop-2{
		/* offset-distance: 0%;
		stop-color: red; */
		stop-offset: 90%;
	}

	:root{
		scrollbar-width: thin;
        scrollbar-color: #E5322E black;
	}

	::-webkit-scrollbar {
        width: 6px;
        height: 6px;
    }

	::-webkit-scrollbar-thumb {
        background-color: #E5322E;
        border-radius: 3px;
    }

	::-webkit-scrollbar-track {
        background-color: black;
        border-radius: 3px;
    }

	body{
		padding : 0px;
		margin: 0px;
		cursor: none;
	}

	.click-me{
        animation: blink 2s ease forwards infinite;
        color: white;
    }

    @keyframes blink{
        0%{
            color:#E5322E;
			border-bottom-color: #E5322E;
        }
        50%{
            color:white;
			border-bottom-color: white;
        }100%{
            color:#E5322E;
			border-bottom-color: #E5322E;
        }
    }
</style>
<script>
	let overLay = document.querySelectorAll('.overlay') as NodeListOf<HTMLElement>
	let overlayOpenButton = document.querySelectorAll('.overlay-open') as NodeListOf<HTMLElement>
	let overlayContent = document.querySelectorAll('.overlay-content') as NodeListOf<HTMLElement>

	let cursor = document.querySelector('.kur') as HTMLElement
	let allVideoElements = document.querySelectorAll('video')

	//event for stopping all audio here when user plays the videos
	const videoIsPlayingEvent = new Event("videoisplaying")
	//event for stopping all audio here when user plays the videos
	const videoIsNotPlayingEvent = new Event("videoisnotplaying")

	// document.dispatchEvent(testEvent)

	overlayOpenButton.forEach((btn, i) => {
		btn.onclick = () => {
			overLay[i].classList.remove('hidden')
			overLay[i].classList.add('flex')
			overLay[i].animate([{opacity : 1}],{duration : 1000, fill : 'forwards'})

			allVideoElements.forEach((video,j)=> {
				if(j == i){
					video.play()
				}
			})
			
		}

		
	})

	overLay.forEach((player) => {
		player.onclick = () => {
			let animation = player.animate([{opacity : 0}],{duration:1000, fill:'forwards'})
			allVideoElements.forEach(ele => ele.pause())
			animation.onfinish = () => {
				player.classList.remove('flex')
				player.classList.add('hidden')
			}
		}
	})

	overlayContent.forEach(content => {
		content.onclick = (e) => e.stopPropagation()
	})

	let X = -100
	let Y = 0

	window.addEventListener('mousemove',(e)=>{
		X = e.clientX - 6
		Y = e.clientY - 6

		window.requestAnimationFrame(()=>{
			updateCursor(X, Y)
		})
		// cursor.style.transform = `translateX(${e.clientX}px)`
	})

	document.querySelectorAll('a').forEach(a =>{
		a.onmouseenter = () => {
			cursor.style.opacity = '0'
		}

		a.onmouseleave = () => {
			cursor.style.opacity = '1'
		}
	})

	let all = document.querySelectorAll('.mouse-change') as NodeListOf<HTMLElement>
	all.forEach(a => {
		a.onmouseenter = () => {
			cursor.style.opacity = '0'
		}

		a.onmouseleave = () => {
			cursor.style.opacity = '1'
		}
	}) 

	// document.querySelectorAll('.hover:cursor-pointer').forEach(a => {
	// 	a.onmouseenter = () => {
	// 		cursor.style.opacity = '0'
	// 	}

	// 	a.onmouseleave = () => {
	// 		cursor.style.opacity = '1'
	// 	}
	// })


	function updateCursor(x, y){
		cursor.style.transition = 'all 0.1s ease'
		cursor.style.transform = `translate(${x}px, ${y}px)`

		// console.log('request', X)
		// window.requestAnimationFrame(updateCursor)
	}

	document.onclick = () => {
		console.log('all videos', allVideoElements)
		// allVideoElements.forEach(ele => ele.pause())
	}

	allVideoElements.forEach(video => {
		video.onplay = () => {
			document.dispatchEvent(videoIsPlayingEvent)
		}

		video.onpause = () => {
			document.dispatchEvent(videoIsNotPlayingEvent)
		}
	})
</script>